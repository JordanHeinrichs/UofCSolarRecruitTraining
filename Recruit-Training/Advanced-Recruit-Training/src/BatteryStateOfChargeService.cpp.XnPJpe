#include "BatteryStateOfChargeService.h"
#include "BatteryData.h"

#define HOURS_TO_SECONDS 3600

namespace
{
    const double BATTERY_AMP_HOUR_CAPACITY = 123.0;
}
static double prevCurrent, current, voltage, totalAmpHours;
static QTime prevTime,currentTime;

//Constructors
BatteryStateOfChargeService::BatteryStateOfChargeService(double initialStateOfChargePercent)
: initialStateOfChargePercent_(initialStateOfChargePercent)
{
    initialAmpHours_ = BATTERY_AMP_HOUR_CAPACITY * (initialStateOfChargePercent/100);
    prevCurrent = 0;
    totalAmpHours = 0;

}

BatteryStateOfChargeService::~BatteryStateOfChargeService() //destructor
{    
}
//---------------
double BatteryStateOfChargeService::totalAmpHoursUsed() const //using the most recent data points
{
    return BATTERY_AMP_HOUR_CAPACITY * initialStateOfChargePercent_;

}

bool BatteryStateOfChargeService::isCharging() const
{
    return current < 0;
}

QTime BatteryStateOfChargeService::timeWhenChargedOrDepleted() const
{



   QTime time(0,0);
   return time;
}

void BatteryStateOfChargeService::addData(const BatteryData& batteryData)
{
    //Q_UNUSED(batteryData);
    prevCurrent = current;
    current = batteryData.current;
    voltage = batteryData.voltage;
    currentTime = batteryData.time;
    prevTime = batteryData.time;

//    theBatteryData_.time.addMSecs(theBatteryData_.time.msecsTo(batteryData.time));
    // This is where you can update your variables
    // Hint: There are many different ways that the totalAmpHoursUsed can be updated
    // i.e: Taking a running average of your data values, using most recent data points, etc.
}
